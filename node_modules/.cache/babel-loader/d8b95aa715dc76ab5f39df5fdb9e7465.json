{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Sites/jiffy/src/App.js\";\nimport React, { Component } from 'react'; //here we import in our loader spinner image\n\nimport loader from \"./images/loader.svg\";\n\nconst randomChoice = arr => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nconst Header = () => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"header grid\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"h1\", {\n  className: \"title\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}, \"Jiffy\"));\n\nconst UserHint = ({\n  loading,\n  hintText\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"user-hint\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }\n}, loading ? /*#__PURE__*/React.createElement(\"img\", {\n  src: require('./images/loader.svg'),\n  className: \"block mx-auto\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 14\n  }\n}) : hintText);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchGiphy = async searchTerm => {\n      // first we try our fetch\n      try {\n        // here we use the await key word to wait for our response to come back\n        const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=JWfQkyED854JjZJOKiPMb6BZkrxpam10&q=${searchTerm}&limit=25&offset=0&rating=g&lang=en`); // here we convert our raw response into jason data \n        // const {data} gets the .data part of our responses\n\n        const {\n          data\n        } = await response.json(); // here we grab a random result from our images\n\n        const randomGif = randomChoice(data);\n        this.setState((prevState, props) => ({ ...prevState,\n          // get the first result and put it in the state\n          gif: randomGif\n        })); // if our fetch fails we catch it down here\n      } catch (error) {}\n    };\n\n    this.handleChange = event => {\n      // const value = event.target.value\n      const {\n        value\n      } = event.target; // by setting the searcht term in our state\n      // and alos using that on the input as the value,\n      // we have created what is called a controlled input\n\n      this.setState((prevState, props) => ({ //we take our old props and spread them out here\n        ...prevState,\n        //and then we overwrite the ones we want after\n        searchTerm: value,\n        // we set the hint text when we have more than two characters\n        // in our input, otherwise we make it a empty string\n        hintText: value.length > 2 ? `Hit enter to search ${value}` : ''\n      }));\n    };\n\n    this.handleKeyPress = event => {\n      // when we have two or more characters in our search box\n      // and we have also pressed enter, we then want to run a search\n      // we can access a function called key\n      const {\n        value\n      } = event.target;\n\n      if (value.length > 2 && event.key === 'Enter') {\n        //here is where we run our search function\n        //here we call our searchGiphy function using the search term\n        this.searchGiphy(value);\n      }\n    };\n\n    this.state = {\n      searchTerm: '',\n      hintText: '',\n      gif: null\n    };\n  } // we want a function that searches the giphy api using\n  // fetch and puts the search term into the query URL\n  // then we can do something with the results\n  // we can also write async methods into our components\n  // that let us use the async/await style of function\n\n\n  render() {\n    //const searchTerm = this.state.searchTerm\n    const {\n      searchTerm,\n      gif\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }, gif && /*#__PURE__*/React.createElement(\"video\", {\n      className: \"grid-item video\",\n      autoPlay: true,\n      loop: true,\n      src: gif.images.original.mp4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input grid-item\",\n      placeholder: \"Type somethin\",\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      value: searchTerm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(UserHint, Object.assign({}, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/apple/Sites/jiffy/src/App.js"],"names":["React","Component","randomChoice","arr","randIndex","Math","floor","random","length","Header","UserHint","loading","hintText","require","App","constructor","props","searchGiphy","searchTerm","response","fetch","data","json","randomGif","setState","prevState","gif","error","handleChange","event","value","target","handleKeyPress","key","state","render","images","original","mp4"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n//here we import in our loader spinner image\nimport loader from './images/loader.svg';\n\nconst randomChoice = arr => {\n  const randIndex = Math.floor(Math.random()* arr.length);\n  return arr[randIndex];\n};\n\nconst Header = () => (\n  <div className=\"header grid\">\n    <h1 className=\"title\">Jiffy</h1>\n  </div>\n);\n\nconst UserHint = ({loading, hintText}) => (\n  <div className=\"user-hint\"> \n  {/* here we check whether we have a loading state and we render out\n  either our spinner or hintText based on that, using a ternary operator */}\n  {loading ? <img src={require('./images/loader.svg')} className=\"block mx-auto\" /> :\n    hintText\n  }</div>\n);\n\nclass App extends Component {\n\nconstructor(props) {\n  super(props) \n  this.state = {\n    searchTerm: '',\n    hintText: '',\n    gif: null\n  }\n}\n\n// we want a function that searches the giphy api using\n// fetch and puts the search term into the query URL\n// then we can do something with the results\n\n// we can also write async methods into our components\n// that let us use the async/await style of function\nsearchGiphy = async searchTerm => {\n  // first we try our fetch\n  try {\n    // here we use the await key word to wait for our response to come back\n    const response = await fetch(\n      `https://api.giphy.com/v1/gifs/search?api_key=JWfQkyED854JjZJOKiPMb6BZkrxpam10&q=${searchTerm}&limit=25&offset=0&rating=g&lang=en`\n      ); \n    \n     // here we convert our raw response into jason data \n    // const {data} gets the .data part of our responses\n     const {data} = await response.json();\n      \n    // here we grab a random result from our images\n    const randomGif = randomChoice(data)\n\n\n    this.setState((prevState, props) => ({\n      ...prevState,\n      // get the first result and put it in the state\n      gif: randomGif\n    }))\n    \n\n\n    // if our fetch fails we catch it down here\n    } catch (error) {}\n  };\n\n  //with create react app we can write our methods as arrow\n  //functions, meaning we don't need the constructor and bind\n  handleChange = event => {\n    // const value = event.target.value\n    const {value} = event.target;\n    // by setting the searcht term in our state\n    // and alos using that on the input as the value,\n    // we have created what is called a controlled input\n    this.setState((prevState, props) => ({\n      //we take our old props and spread them out here\n      ...prevState,\n      //and then we overwrite the ones we want after\n      searchTerm: value,\n      // we set the hint text when we have more than two characters\n      // in our input, otherwise we make it a empty string\n      hintText: value.length > 2 ? `Hit enter to search ${value}` : ''\n    }));\n    \n   };\n    \n   handleKeyPress = event => {\n   // when we have two or more characters in our search box\n   // and we have also pressed enter, we then want to run a search\n   // we can access a function called key\n    const {value} = event.target;\n    if (value.length > 2 && event.key === 'Enter') {\n      //here is where we run our search function\n      //here we call our searchGiphy function using the search term\n      this.searchGiphy(value);\n    }\n   };\n\n   render() {\n     //const searchTerm = this.state.searchTerm\n     const { searchTerm, gif } = this.state\n    return  <div className=\"page\">\n    <Header />\n    <div className=\"search grid\">\n      {/* our stack of gif images */}\n      {/* its only going to render our video \n      when we have a gif in the state, we can test for it using && */}\n      {gif && (\n          <video\n          className='grid-item video'\n          autoPlay\n          loop\n          src={gif.images.original.mp4}\n        />\n      )} \n      <input className=\"input grid-item\" placeholder=\"Type somethin\"\n      onChange={this.handleChange}\n      onKeyPress={this.handleKeyPress}\n      value={searchTerm}\n      />\n    </div>\n    {/* here we pass our userHint all of our state usnig a spread */}\n    < UserHint {...this.state}/>\n  </div>\n  };\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}